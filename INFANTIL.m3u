       # if headers:

            #     url = m3u8_to_ts(url) + headers

            # else:

            #     url = m3u8_to_ts(url)

            # url,stream = ts_to_m3u8(url)

            # #url = url + headers

            #url = m3u8_to_ts(url)

            urlbase,stream = ts_to_m3u8(url)

            url = urlbase + headers

            li.setProperty('inputstream', 'inputstream.ffmpegdirect')

            li.setProperty('IsPlayable', 'true')

            if '.m3u8' in url:

                li.setContentLookup(False)

                li.setMimeType('application/vnd.apple.mpegurl')

                li.setProperty('inputstream.ffmpegdirect.mime_type', 'application/vnd.apple.mpegurl')

                li.setProperty('ForceResolvePlugin','false')

                # li.setProperty('inputstream', 'inputstream.adaptive')

                # li.setProperty('inputstream.ffmpegdirect.manifest_type','hls')

            else:

                # li.setContentLookup(True)

                li.setMimeType('video/mp2t')

                li.setProperty('inputstream.ffmpegdirect.mime_type', 'video/mp2t')

                # li.setProperty('ForceResolvePlugin','true')

            # li.setProperty('http-reconnect', 'true')

            # li.setProperty('TotalTime', '3600')

            li.setProperty('inputstream.ffmpegdirect.stream_mode', 'catchup')

            # li.setProperty('inputstream.ffmpegdirect.timezone_shift', '20')

            li.setProperty('inputstream.ffmpegdirect.is_realtime_stream', 'true')

            li.setProperty('inputstream.ffmpegdirect.is_catchup_stream', 'catchup')

            li.setProperty('inputstream.ffmpegdirect.catchup_granularity', '60')

            li.setProperty('inputstream.ffmpegdirect.catchup_terminates', 'true')

            if is_xtream_codes(urlbase):            

                li.setProperty('inputstream.ffmpegdirect.open_mode', 'curl')

            # li.setProperty('inputstream.ffmpegdirect.playback_as_live', 'true')

            # if '.m3u8' in url:             

                # li.setProperty('inputstream.ffmpegdirect.manifest_type','hls') 

            #li.setProperty('inputstream.ffmpegdirect.manifest_type','ism')

            #print('aqui', url)                

            li.setProperty('inputstream.ffmpegdirect.default_url',url)

            li.setProperty('inputstream.ffmpegdirect.catchup_url_format_string',url)

            li.setProperty('inputstream.ffmpegdirect.programme_start_time','1')

            li.setProperty('inputstream.ffmpegdirect.programme_end_time','19')

            li.setProperty('inputstream.ffmpegdirect.catchup_buffer_start_time','1')

            li.setProperty('inputstream.ffmpegdirect.catchup_buffer_offset','1') 

            li.setProperty('inputstream.ffmpegdirect.default_programme_duration','19')

            li.setPath(url)

        else:

            url = url + headers

            li.setPath(url)

    # xbmc.Player().play(item=url, listitem=li)

    if get_kversion() > 19:

        info = li.getVideoInfoTag()

        info.setTitle(name)

    else:

        li.setInfo(type="Video", infoLabels={"Title": name, "Plot": ""})

    t1 = threading.Thread(target=iniciavideo.tocar,args=(url,li))

    t1.start()

    # t1.join()
